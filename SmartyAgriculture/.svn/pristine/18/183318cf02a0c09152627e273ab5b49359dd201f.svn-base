package cn.bupt.smartyagl.controller;

import java.util.Date;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.swing.JOptionPane;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.ModelAndView;

import com.github.pagehelper.Page;
import com.github.pagehelper.PageHelper;

import cn.bupt.smartyagl.constant.Constants;
import cn.bupt.smartyagl.entity.autogenerate.BlockManagerView;
import cn.bupt.smartyagl.entity.autogenerate.block;
import cn.bupt.smartyagl.model.BlockModel;
import cn.bupt.smartyagl.service.IBlockService;
import cn.bupt.smartyagl.util.DateTag;

@Controller
@RequestMapping("/block")
public class BlockController extends BaseController {
    @Autowired
    IBlockService blockService;
    
    int pageSize=Constants.PAGESIZE;//，每一页的大小
    int pageSizeSmall=Constants.PAGESIZE;//分页，每一页数目比较少
    
    /**
     * 显示土地列表
     * @author wlz
     */
    @RequestMapping(value="/index/{allPages}/{currentPage}/{type}")
    public ModelAndView blockIndex(@PathVariable(value="allPages") int allPages,
            @PathVariable(value="currentPage")int currentPage,
            @PathVariable(value="type") String type) {
        
        if ("prvious".equals(type)) {
            if( currentPage > 1 ){//第一页不能往前翻页
                currentPage--;
            }
        } else if ("next".equals(type)) {
            currentPage++;
        } else if ("first".equals(type)) {
            currentPage = 1;
        } else if ("last".equals(type)) {
            currentPage = allPages;
        } else {
            currentPage = Integer.parseInt(type);
        }
        
        ModelAndView modelAndView=new ModelAndView(Constants.BLOCK_INDEX);
        
        Page page = PageHelper.startPage(currentPage, pageSize, "id");
        
        List<BlockModel> blockModelList=blockService.getBlockList();
        
        modelAndView.addObject("blockList",blockModelList);
        //总页数
        allPages = page.getPages();
        modelAndView.addObject("allPages", allPages);
        // 当前页码
        currentPage = page.getPageNum();
        modelAndView.addObject("currentPage", currentPage);
        return modelAndView;
    }
    
    /**
     * 添加土地(页面跳转)
     * 
     * @return
     */
    @RequestMapping("/addblock")
    public ModelAndView addBlock(HttpServletRequest request) {
        ModelAndView modelAndView = new ModelAndView();
        modelAndView.setViewName(Constants.BLOCK_ADD);
        return modelAndView;
    }
    
    
    /**
     * 添加土地(添加信息)
     */
    @RequestMapping("/addBlockPost")
    public ModelAndView addBlockPost(block block) {
        block.setCreateTime(new Date());
        Boolean flag=blockService.addBlocks(block);
        ModelAndView modelAndView = blockIndex(0, 1, "prvious");
        if(flag) 
            return modelAndView;
        else { 
            JOptionPane.showMessageDialog(null, "添加失败 ", "添加失败", JOptionPane.ERROR_MESSAGE);
            return modelAndView;
        }
    }
    
    
    /**
     * 查看土地信息
     */
    @RequestMapping(value="/detail/{blockId}/{allPages}/{currentPage}/{type}")
    public ModelAndView blockInfo(@PathVariable(value="blockId") Integer blockId,
            @PathVariable(value = "allPages") int allPages,
            @PathVariable(value = "currentPage") int currentPage,
            @PathVariable(value = "type") String type){
        
        if ("prvious".equals(type)) {
            if (currentPage > 1) {// 第一页不能往前翻页
                currentPage--;
            }
        } else if ("next".equals(type)) {
            currentPage++;
        } else if ("first".equals(type)) {
            currentPage = 1;
        } else if ("last".equals(type)) {
            currentPage = allPages;
        } else {
            currentPage = Integer.parseInt(type);
        }
        
        ModelAndView modelAndView =new ModelAndView(Constants.BLOCK_DETAIL);
        BlockModel blockModel=new BlockModel();
        block block = blockService.getBlockByBlockId(blockId);
        blockModel.setBlock(block);
        String dateString = DateTag.dateTimaFormat(block.getCreateTime());
        blockModel.setDateString(dateString);
        List<BlockManagerView> blockManagerViewList =blockService.getBlockManagerView(blockId);
        String adminName="";
        int status=0;
        for (BlockManagerView blockManagerView : blockManagerViewList) {
            
            adminName = adminName+" "+blockManagerView.getName();
            status = blockManagerView.getStatus();
        }
        System.out.println(adminName.trim());
        blockModel.setAdminName(adminName);
        blockModel.setStatus(status);
        modelAndView.addObject("blockInfo", blockModel);
        return modelAndView;
        
        
    }
    
    
    
    
    
    
    
    
    
}
